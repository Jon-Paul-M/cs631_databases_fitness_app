-- This is where the ddl will go

SET REFERENTIAL_INTEGRITY FALSE;
DROP SEQUENCE hibernate_sequence IF EXISTS;
DROP TABLE IF EXISTS REGISTER;
DROP TABLE IF EXISTS CLASS;
DROP TABLE IF EXISTS SALARIED_INSTRUCTOR;
DROP TABLE IF EXISTS HOURLY_INSTRUCTOR;
DROP TABLE IF EXISTS ROOM;
DROP TABLE IF EXISTS EXERCISE;
DROP TABLE IF EXISTS MEMBER;
DROP TABLE IF EXISTS MEMBERSHIP;
DROP TABLE IF EXISTS ROLES_PRIVILEGES;
DROP TABLE IF EXISTS PRIVILEGE;
DROP TABLE IF EXISTS USERS_ROLES;
DROP TABLE IF EXISTS ROLE;
DROP TABLE IF EXISTS USER;
SET REFERENTIAL_INTEGRITY TRUE;

CREATE SEQUENCE hibernate_sequence START WITH 200 INCREMENT BY 1;

CREATE TABLE USER (
	USER_ID             INTEGER AUTO_INCREMENT NOT NULL,
	EMAIL               VARCHAR(512) NOT NULL,
	NAME                VARCHAR(512) NOT NULL,
	ENABLED             BOOLEAN NOT NULL,
	TOKEN_EXPIRED       BOOLEAN NOT NULL,
	PASSWORD_HASH        VARCHAR(512) NOT NULL,
	PRIMARY KEY (USER_ID)
);

CREATE TABLE ROLE (
    ROLE_ID INTEGER NOT NULL,
    NAME VARCHAR(64) NOT NULL,
    PRIMARY KEY (ROLE_ID)
);
ALTER TABLE ROLE
    ADD CONSTRAINT UK_ROLE_NAME UNIQUE (NAME);

CREATE TABLE USERS_ROLES (
    USER_ID INTEGER NOT NULL,
    ROLE_ID INTEGER NOT NULL,
    PRIMARY KEY (USER_ID, ROLE_ID)
);
ALTER TABLE USERS_ROLES
    ADD CONSTRAINT FK_USERS_ROLES_USER_ID
    FOREIGN KEY (USER_ID)
    REFERENCES USER (USER_ID);
ALTER TABLE USERS_ROLES
    ADD CONSTRAINT FK_USERS_ROLES_ROLE_ID
    FOREIGN KEY (ROLE_ID)
    REFERENCES ROLE (ROLE_ID);

CREATE TABLE PRIVILEGE (
    PRIVILEGE_ID INTEGER NOT NULL,
    NAME VARCHAR(64) NOT NULL,
    PRIMARY KEY (PRIVILEGE_ID)
);
ALTER TABLE PRIVILEGE
    ADD CONSTRAINT UK_PRIVILEGE_NAME UNIQUE (NAME);

CREATE TABLE ROLES_PRIVILEGES (
    ROLE_ID INTEGER NOT NULL,
    PRIVILEGE_ID INTEGER NOT NULL,
    PRIMARY KEY (ROLE_ID, PRIVILEGE_ID)
);
ALTER TABLE ROLES_PRIVILEGES
    ADD CONSTRAINT FK_ROLES_PRIVILEGES_ROLE_ID
    FOREIGN KEY (ROLE_ID)
    REFERENCES ROLE (ROLE_ID);
ALTER TABLE ROLES_PRIVILEGES
    ADD CONSTRAINT FK_ROLES_PRIVILEGES_PRIVILEGE_ID
    FOREIGN KEY (PRIVILEGE_ID)
    REFERENCES PRIVILEGE (PRIVILEGE_ID);

CREATE TABLE MEMBERSHIP(
    MEMBERSHIP_ID INTEGER NOT NULL,
    MEMBERSHIP_TYPE VARCHAR(64) NOT NULL,
    FEE DECIMAL NOT NULL,
    ADVANTAGES VARCHAR(4096),
    PRIMARY KEY (MEMBERSHIP_ID)
);

CREATE TABLE MEMBER(
    USER_ID INTEGER NOT NULL,
    ADDRESS1         VARCHAR(512),
    ADDRESS2         VARCHAR(512),
    CITY            VARCHAR(512),
    COUNTY          VARCHAR(512),
    STATE           VARCHAR(512),
    POSTAL_CODE     VARCHAR(32),
    REGISTRATION_DATE TIMESTAMP,
    MEMBERSHIP_ID INTEGER NOT NULL,
    PRIMARY KEY (USER_ID),
    FOREIGN KEY (USER_ID) REFERENCES USER (USER_ID),
    FOREIGN KEY (MEMBERSHIP_ID) REFERENCES MEMBERSHIP(MEMBERSHIP_ID)
);

CREATE TABLE EXERCISE (
    EXERCISE_ID INTEGER NOT NULL,
    NAME VARCHAR(512),
    DESCRIPTION VARCHAR(4096),
    PRIMARY KEY (EXERCISE_ID)
);

CREATE TABLE ROOM (
    ROOM_ID INTEGER NOT NULL,
    CAPACITY INTEGER NOT NULL,
    ROOM_NUMBER VARCHAR(256),
    BUILDING_NAME VARCHAR(512),
    PRIMARY KEY (ROOM_ID)
);

CREATE TABLE HOURLY_INSTRUCTOR (
    USER_ID INTEGER NOT NULL,
    HOURS DECIMAL NOT NULL,
    HOURLY_WAGE DECIMAL NOT NULL,
    PRIMARY KEY (USER_ID),
    FOREIGN KEY (USER_ID) REFERENCES USER (USER_ID)
);

CREATE TABLE SALARIED_INSTRUCTOR (
    USER_ID INTEGER NOT NULL,
    SALARY DECIMAL,
    PRIMARY KEY (USER_ID),
    FOREIGN KEY (USER_ID) REFERENCES USER (USER_ID)
);

CREATE TABLE CLASS (
    CLASS_ID       INTEGER NOT NULL,
    EXERCISE_ID    INTEGER NOT NULL,
    ROOM_ID        INTEGER,
    INSTRUCTOR_ID  INTEGER,
    START_DATETIME TIMESTAMP NOT NULL,
    DURATION       INTEGER NOT NULL,
    PRIMARY KEY (CLASS_ID, EXERCISE_ID),
    FOREIGN KEY (ROOM_ID) REFERENCES ROOM (ROOM_ID),
    FOREIGN KEY (INSTRUCTOR_ID) REFERENCES USER (USER_ID)
);

CREATE TABLE REGISTER (
    USER_ID INTEGER NOT NULL,
    CLASS_ID INTEGER NOT NULL,
    EXERCISE_ID INTEGER NOT NULL,
    PRIMARY KEY (USER_ID, CLASS_ID, EXERCISE_ID),
    FOREIGN KEY (USER_ID) REFERENCES USER (USER_ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASS (CLASS_ID),
    FOREIGN KEY (EXERCISE_ID) REFERENCES EXERCISE (EXERCISE_ID)
);
